#include <vector>
using namespace std;
#include <unordered_set>
/*
 * @lc app=leetcode id=924 lang=cpp
 * @lcpr version=30100
 *
 * [924] Minimize Malware Spread
 *
 * https://leetcode.com/problems/minimize-malware-spread/description/
 *
 * algorithms
 * Hard (42.19%)
 * Likes:    1041
 * Dislikes: 624
 * Total Accepted:    61.4K
 * Total Submissions: 145.4K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * You are given a network of n nodes represented as an n x n adjacency matrix
 * graph, where the i^th node is directly connected to the j^th node if
 * graph[i][j] == 1.
 * 
 * Some nodes initial are initially infected by malware. Whenever two nodes are
 * directly connected, and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware. This spread of malware will
 * continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network after the spread of malware stops. We will remove exactly one
 * node from initial.
 * 
 * Return the node that, if removed, would minimize M(initial). If multiple
 * nodes could be removed to minimize M(initial), return such a node with the
 * smallest index.
 * 
 * Note that if a node was removed from the initial list of infected nodes, it
 * might still be infected later due to the malware spread.
 * 
 * 
 * Example 1:
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * Example 3:
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 * 
 * 
 * Constraints:
 * 
 * 
 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] is 0 or 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length <= n
 * 0 <= initial[i] <= n - 1
 * All the integers in initial are unique.
 * 
 * 
 */

// @lc code=start
class unionfind {
public:
    vector<int> parents;
    int size;

    unionfind(int n):size(n){
        this->parents.resize(n);
        for(int i = 0; i < this->parents.size(); i++){
            this->parents[i] = i;
        }
    }

    int find(int x){
        if(this->parents[x] != x){
            this->parents[x] = find(this->parents[x]);
        }
        return this->parents[x];
    }


    void uni(int a, int b){
        if(find(a) != find(b)){
            int x = find(a);
            int y = find(b);
            this->parents[x] = y;
        }
    }   
};
class Solution {
public:
    vector<int> dfs(int node, vector<vector<int>>& graph, unordered_set<int>& initial, vector<int>& visited ){
        int badcount = initial.count(node) ? 1 : 0;
        int total = 1;
        visited[node] = 1;
        for(int i = 0; i < graph[node].size(); i++){
            if(graph[node][i] == 0 || visited[i] == 1) continue;
            visited[i] = 1;
            auto temp = dfs(i,graph,initial,visited);
            badcount += temp[1];
            total += temp[0];
        }
        return {total,badcount};
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        unordered_set<int> ini (initial.begin(),initial.end());
        vector<int> visited(graph.size(),0);
        int maxSpread = 0;
        sort(initial.begin(),initial.end());

        int res = initial[0];
        for(int i : initial){
            if(visited[i] == 1) continue;
            auto temp = dfs(i,graph,ini,visited);
            if(temp[1] == 1){
                if(temp[0] > maxSpread){
                    maxSpread = temp[0];
                    res = i;
                }else if(temp[0] == maxSpread){
                    res = min(res,i);
                }
            }
        }
        return res;
    }
    int minMalwareSpread2(vector<vector<int>>& graph, vector<int>& initial) {
        unionfind uf(graph.size());      
        vector<int> siz(graph.size(),0);
        vector<int> infected(graph.size(),0);
        unordered_set<int> ini(initial.begin(),initial.end());
        for(int i = 0; i < graph.size(); i++){
            for(int j = 0; j < graph[i].size(); j++){
                if(i != j && graph[i][j] == 1){
                    uf.uni(i,j);
                }
            }
        }

        for(int i = 0; i < graph.size(); i++){
            siz[uf.find(i)]++;
            if(ini.count(i)){
                infected[uf.find(i)]++;
            }
        }

        int res = -1;
        int max = -1;
        for(int i = 0; i < initial.size(); i++){
            int p = uf.find(initial[i]);
            if(infected[p] == 1){
                if(siz[p] > max){
                    max = siz[p];
                    res = initial[i];
                }else if(siz[p] == max){
                    res = min(res,initial[i]);
                }
            }
        }

        return res != -1 ? res : *min_element(initial.begin(),initial.end());
    }
};
// @lc code=end



/*
// @lcpr case=start
// [[1,1,0],[1,1,0],[0,0,1]]\n[0,1]\n
// @lcpr case=end

// @lcpr case=start
// [[1,0,0],[0,1,0],[0,0,1]]\n[0,2]\n
// @lcpr case=end

// @lcpr case=start
// [[1,1,1],[1,1,1],[1,1,1]]\n[1,2]\n
// @lcpr case=end

 */

